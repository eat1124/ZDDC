参数=[数据源，应用，周期]

def __init__():	
	补取()
	启动定时器，每分钟执行一次
	
def 补取():
	processmonitor = ProcessMonitor.object.get(数据源，应用，周期)
	strattime=processmonitor.last_time
	endtime=datetime.datetime.now()
	for (DateTime dtime = lasttime; dtime < endtime; time = time.AddMinutes(1))
	{
		getdata(time);
	}
	
	#再次查看最后取数时间
	processmonitor = ProcessMonitor.object.get(数据源，应用，周期)
	last_time=processmonitor.last_time
	if datetime.datetime.now() - last_time>1分钟(先把秒数抹掉再比较)：
		补取()
	
	
def 定时器():
	time=datetime.datetime.now()
	getdata(time)	


def getdata(time):
	if time符合周期取数规则
		indexlist=符合参数的全部指标，order by(storage,storagetag)
		copypindexlist = indexlist
		for index in indexlist:
			if index.storage.storagetype=="行“：
				getrowdate(index, time);
			elif index.storage.storagetype=="列“：
				colindexlist= copypindexlist.filter(storage=index.storage,storagetag=index.storagetag);
				copypindexlist = copypindexlist.exclude(storage=index.storage,storagetag=index.storagetag);
				getcolrowdate(colindexlist, time);
                存一条，删一条
                
	processmonitor = ProcessMonitor.object.get(数据源，应用，周期)
	processmonitor.last_time=time
	processmonitor.save()
				
def getrowdate(index, time):
	source_content=index.source_content
	
	/*
	将source_content中包含的<#DATE:m:L#>替换成time时间，DATE包含2个参数，
	第一个参数值有s,mi,h,d,m,y,用于表示时间格式，对应
	time.ToString("yyyy-MM-dd HH:MI:SS"))
	time.ToString("yyyy-MM-dd HH:MI"))
	time.ToString("yyyy-MM-dd HH"))
	dtime.ToString("yyyy-MM-dd"))
	dtime.ToString("yyyy-MM"))
	dtime.ToString("yyyy"))
	第二个参数值表示时间点
	{
		"D": "当前", "L": "前一天", "MS": "月初", "ME": "月末", "LMS": "上月初", "LME": "上月末", "SS": "季初", "SE": "季末",
		"LSS": "上季初", "LSE": "上季末", "HS": "半年初", "HE": "半年末", "LHS": "前个半年初", "LHE": "前个半年末", "YS": "年初",
		"YE": "年末", "LYS": "去年初", "LYE": "去年末"
	}
	*/
	格式化 source_content；
	
	resultlist=[]
	if 数据源.数据源类型==Oracle":
		resultlist = 查询oracle(source_content)
	elif 数据源.数据源类型==Sqlserver":
		resultlist = 查询Sqlserver(source_content)
        
	elif 数据源.数据源类型==IH":
		resultlist = IH(source_content)	先不写

	for result in resultlist:  # 取到整张表的数据，遍历每行，再遍历行中每个字段，
		storage={}
		for i in range(len(result.cols)):
			storage[index.storagefields[i]]=result.cols[i]  # 每个数据都写入对应的字段中
		storage["target_id"] = index.target_id
		storage["savedate"] = time
		if "DATADATE" in index.storagefields：
			storage["datadate"] = 格式化(time)
		storage.save()
			
		/*将result的数据保存到storage的storagefields字段中
		storagefields有4个特例，
		1.id，id字段不需要配置，storage表必有id字段并自增长
		2.target_id,target_id字段不需要配置,代码中强制保存index.id到storage的target_id字段
		3.savedate,savedate字段不需要配置,代码中强制保存time到storage的savedate字段
		4.datadate，配置时需放在普通字段之后，datadate格式如<#DATADATE:m:S#>，参考source_content中的时间格式，将time格式化后再转成日期格式保存
		*/
		
def getcoldate(colindexlist, time):
	storage={}
	#storage["target_id"] = index.target_id
	storage["savedate"] = time
	if "DATADATE" in index.storagefields：
		storage["datadate"] = 格式化(time)
		
	for index in colindexlist:
		source_content=index.source_content
		
		/*
		将source_content中包含的<#DATE:m:S#>替换成time时间，DATE包含2个参数，
		第一个参数值有s,mi,h,d,m,y,用于表示时间格式，对应
		time.ToString("yyyy-MM-dd HH:MI:SS"))
		time.ToString("yyyy-MM-dd HH:MI"))
		time.ToString("yyyy-MM-dd HH"))
		dtime.ToString("yyyy-MM-dd"))
		dtime.ToString("yyyy-MM"))
		dtime.ToString("yyyy"))
		第二个参数值表示时间点
		{
			"D": "当前", "L": "前一天", "MS": "月初", "ME": "月末", "LMS": "上月初", "LME": "上月末", "SS": "季初", "SE": "季末",
			"LSS": "上季初", "LSE": "上季末", "HS": "半年初", "HE": "半年末", "LHS": "前个半年初", "LHE": "前个半年末", "YS": "年初",
			"YE": "年末", "LYS": "去年初", "LYE": "去年末"
		}
		*/
		格式化source_content；
		
		resultlist=[]
		if 数据源.数据源类型==Oracle":
			resultlist = 查询oracle(source_content)
		elif 数据源.数据源类型==Sqlserver":
			resultlist = 查询Sqlserver(source_content)
            
		elif 数据源.数据源类型==IH":
			resultlist = IH(source_content)	先不写
		
		if resultlist>0:
			result=resultlist[0]
			for i in range(len(result.cols)):
				storage[index.storagefields[i]]=result.cols[i]
	storage.save()
		

			
			
